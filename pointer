#include<stdio.h>

int main() {
	/*
	1바이트의 메모리 공간을 단위로 하나의 주소 값이 할당되며, 주소 값도 1씩 증가
	포인터를 잘 이해하기 위해서는 메모리 공간을 그림으로 그려가면서 공부해야 한다.
	C언어에서는 시작번지만을 가지고 위치를 표현한다.
	int형 변수는 4바이트이므로 변수의 끝이 어딘지는 쉽게 계산이 되기 때문.
	
	ex) int형 변수 num은 0X12ff76번지에 할당되어 있다. 이 대답에 포함되어 있는 주소 값 역시 정수이다.
	따라서 이 주소 값 또한 저장이 가능하며 이 주소의 저장을 위해 마련된 변수가 포인터 변수이다.

	=> "포인터 변수란 메모리의 주소 값을 저장하기 위한 변수이다!"

	여기서 포인터란 변수 형태의 포인터와 상수 형태의 포인터를 어우르는 표현.
	하지만 대부분 포인터 변수와 관련이 있으므로, 포인터 하면 포인터 변수를 연상하면 된다고 한다.


	*/


	//정수 7이 저장된 int형 변수 num을 선언하고 이 변수의 주소 값 저장을 위한 포인터 변수 pnum을 선언하자. 그리고 나서 pnum에 변수 num의 주소 값을 저장하자.
	int num = 7;
	int* pnum;//포인터 변수 pnum을 선언
	pnum= &num;// num의 주소 값을 포인터 변수 pnum에 저장
	printf("%p", pnum);

	/*
	위 예제에서 int*pnum을 해석해보면
	pnum -> 포인터 변수의 이름이고,
	int* -> int형 변수의 주소 값을 저장하는 포인터 변수의 선언이다

	pnum = &num;을 해석해보면
	&연산자는 오른쪽에 등장하는 피연산자의 주소 값을 반환하는 연산자이므로
	위 문장에서 &연산의 결과로 변수 num의 주소 값이 반환되며, 이를 포인터 변수 pnum에 저장하게 되는 것이다.
	이때 pnum에는 변수 num의 시작번지 주소 값이 저장된다.
	그리고 이를
	"포인터 변수 pnum이 int형 변수 num을 가리킨다" 라고 표현한다.

	포인터 변수의 크기는 4바이트가 될 수도 있고, 8바이트가 될 수도 있다.
	32비트 시스템에서는 주소 값을 32비트로 표현하기 때문에 포인터 변수의 크기가 4바이트인 반면, 64비트 시스템에서는 주소 값을 64비트로 표현하기 때문에 포인터 변수의 크기가 8바이트이다.

	*/
}
